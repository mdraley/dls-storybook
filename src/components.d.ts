/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BadgeColor, ButtonType, CellVariant, Color, FormCheckboxType, FormTextInputType, LogoColor, TooltipCta, TooltipPosition, TooltipTrigger, TypographyVariants } from "./global/ts/enums";
import { IFormDropdownOption, INav } from "./global/ts/interfaces";
export namespace Components {
    interface ArvestAccordion {
        /**
          * Accordion title
         */
        "accordiontitle": string;
        "activeCol": number;
        /**
          * 2D Array of columns and cells
         */
        "cols"?: Array<Array<any>>;
        /**
          * Array of row titles
         */
        "rowtitles"?: Array<any>;
        /**
          * Accordion type. Options are 'content', 'table-simple', 'nav', and 'mobileNav'
         */
        "type": string;
    }
    interface ArvestAdFiveCol {
        /**
          * Change the background image using bgimage and a full URL as a string. Example: <arvest-ad-five-col bgimage="https://www.arvest.com/someimage.jpg">  The default background is a geometric pattern.
         */
        "bgimage"?: string;
        /**
          * Change the background color. Color options: cobalt, ocean, navy. Default is cobalt.
         */
        "color"?: string;
        /**
          * CTA / Button text
         */
        "ctatitle"?: string;
        "defaultbg": string;
        /**
          * Change the opacity of the background image. Use a decimal between 0-1. Default value is 0.5 (50%). [optional]
         */
        "opacity"?: string;
        /**
          * Ratio options are 5:2 (52), 2:1 (21)
         */
        "ratio"?: string;
        /**
          * Turn CTA on/off
         */
        "showcta"?: boolean;
        /**
          * CTA / Button URL
         */
        "url"?: string;
    }
    interface ArvestAdFourCol {
        /**
          * Change the background image using bgimage and a full URL as a string. Example: <arvest-ad-four-col bgimage="https://www.arvest.com/someimage.jpg">  The default background is a geometric pattern.
         */
        "bgimage"?: string;
        /**
          * Change the background color. Color options: cobalt, ocean, navy. Default is cobalt.
         */
        "color"?: string;
        /**
          * CTA / Button text
         */
        "ctatitle"?: string;
        "defaultbg": string;
        /**
          * Change the opacity of the background image. Use a decimal between 0-1. Default value is 0.5 (50%). [optional]
         */
        "opacity"?: string;
        /**
          * Turn the CTA on/off
         */
        "showcta"?: boolean;
        /**
          * Optional sizes are small and large
         */
        "size"?: string;
        /**
          * CTA / Button URL
         */
        "url"?: string;
    }
    interface ArvestAlert {
        /**
          * Banner: passing this as true will display the alert as a banner at the top of the page
         */
        "banner": boolean;
        /**
          * Dismissed
         */
        "dismissed": boolean;
        /**
          * Options for the Alert component The types of available alerts are default, alert, confirmation, caution and info. The styles and icons are tied to that selection. [Required]
         */
        "type": string;
    }
    interface ArvestBadge {
        /**
          * Background color of the badge
         */
        "color": BadgeColor;
    }
    interface ArvestBreadcrumb {
        /**
          * Links is an array of routes, it has the following structure: [{"title":"string label","url":"string url"},]
         */
        "links": string;
    }
    interface ArvestButtonOutline {
        "label": string;
    }
    interface ArvestButtonPrimary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button. Must not be more than 25 characters. [Required]
         */
        "label": string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
        /**
          * Custom button width
         */
        "width"?: number;
    }
    interface ArvestButtonSecondary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, button will use ad style
         */
        "isad"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button. Must not be more than 25 characters. [Required]
         */
        "label": string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
        /**
          * Custom button width
         */
        "width"?: number;
    }
    interface ArvestButtonSecondaryReverse {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button [Required]
         */
        "label": string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
    }
    interface ArvestButtonTertiary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * Text inside the button. Must not be more than 30 characters [Required]
         */
        "label": string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
    }
    interface ArvestButtonTwoUp {
        /**
          * Use small button variant?  *
         */
        "isSmall": boolean;
        /**
          * Primary button title.  *
         */
        "primaryTitle": string;
        /**
          * Primary button url.  *
         */
        "primaryUrl": string;
        /**
          * Secondary button title.  *
         */
        "secondaryTitle": string;
        /**
          * Secondary button url.  *
         */
        "secondaryUrl": string;
    }
    interface ArvestButtongroup {
        /**
          * Aria Label for screen readers [Required]
         */
        "ariaLabel": string;
        /**
          * Change the color of the component using the Color enum
         */
        "color"?: Color;
    }
    interface ArvestCard {
        /**
          * Alt text for image
         */
        "cardimgalt"?: string;
        /**
          * URL for Image
         */
        "cardimgsrc"?: string;
        /**
          * Body text
         */
        "cardtext"?: string;
        /**
          * Title text
         */
        "cardtitle"?: string;
    }
    interface ArvestCard3ColTextCta {
        /**
          * Card four body text [Required]
         */
        "bodyfour": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Card four cta label
         */
        "ctafour"?: string;
        /**
          * Card one cta label
         */
        "ctaone"?: string;
        /**
          * Card three cta label
         */
        "ctathree"?: string;
        /**
          * Card two cta label
         */
        "ctatwo"?: string;
        /**
          * Card four cta URL
         */
        "linkfour"?: string;
        /**
          * Card one cta URL
         */
        "linkone"?: string;
        /**
          * Card three cta URL
         */
        "linkthree"?: string;
        /**
          * Card two cta URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour": string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCard3ColTextImage {
        /**
          * Card four image alt text [Required]
         */
        "altfour": string;
        /**
          * Card one image alt text [Required]
         */
        "altone": string;
        /**
          * Card three image alt text [Required]
         */
        "altthree": string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo": string;
        /**
          * Card four body text [Required]
         */
        "bodyfour": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * CTA Link [Required]
         */
        "ctalink": string;
        /**
          * Card four image URL [Required]
         */
        "imagefour": string;
        /**
          * Card one image URL [Required]
         */
        "imageone": string;
        /**
          * Card three image URL [Required]
         */
        "imagethree": string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo": string;
        /**
          * Card four link URL
         */
        "linkfour"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour": string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCard3ColTextImgCta {
        /**
          * Card four image alt text [Required]
         */
        "altfour": string;
        /**
          * Card one image alt text [Required]
         */
        "altone": string;
        /**
          * Card three image alt text [Required]
         */
        "altthree": string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo": string;
        /**
          * Card four body text [Required]
         */
        "bodyfour": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Card one cta label
         */
        "ctafour"?: string;
        /**
          * Card one cta label
         */
        "ctaone"?: string;
        /**
          * Card one cta label
         */
        "ctathree"?: string;
        /**
          * Card one cta label
         */
        "ctatwo"?: string;
        /**
          * Card four image URL [Required]
         */
        "imagefour": string;
        /**
          * Card one image URL [Required]
         */
        "imageone": string;
        /**
          * Card three image URL [Required]
         */
        "imagethree": string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo": string;
        /**
          * Card four link URL
         */
        "linkfour"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour": string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCard4ColTextGlyph {
        /**
          * Card one glyph alt text [Required]
         */
        "altone": string;
        /**
          * Card three glyph alt text [Required]
         */
        "altthree": string;
        /**
          * Card two glyph alt text [Required]
         */
        "alttwo": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCard4ColTextImage {
        /**
          * Card one image alt text [Required]
         */
        "altone": string;
        /**
          * Card three image alt text [Required]
         */
        "altthree": string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * CTA Link
         */
        "ctalink"?: string;
        /**
          * Card one image URL [Required]
         */
        "imageone": string;
        /**
          * Card three image URL [Required]
         */
        "imagethree": string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo": string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCard4ColTextImgCta {
        /**
          * Card one image alt text [Required]
         */
        "altone": string;
        /**
          * Card three image alt text [Required]
         */
        "altthree": string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo": string;
        /**
          * Card one body text [Required]
         */
        "bodyone": string;
        /**
          * Card three body text [Required]
         */
        "bodythree": string;
        /**
          * Card two body text [Required]
         */
        "bodytwo": string;
        /**
          * Card one CTA Text [Required]
         */
        "ctaone": string;
        /**
          * Card three CTA Text [Required]
         */
        "ctathree": string;
        /**
          * Card two CTA Text [Required]
         */
        "ctatwo": string;
        /**
          * Card one image URL [Required]
         */
        "imageone": string;
        /**
          * Card three image URL [Required]
         */
        "imagethree": string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo": string;
        /**
          * Card one link URL [Required]
         */
        "linkone": string;
        /**
          * Card three link URL [Required]
         */
        "linkthree": string;
        /**
          * Card two link URL [Required]
         */
        "linktwo": string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone": string;
        /**
          * Card three title [Required]
         */
        "titlethree": string;
        /**
          * Card two title [Required]
         */
        "titletwo": string;
    }
    interface ArvestCardFullwidth {
        /**
          * Body Text
         */
        "body"?: string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * Headline
         */
        "headline"?: string;
        /**
          * Show the Body Text?
         */
        "showbody"?: boolean;
        /**
          * Show the CTA Link?
         */
        "showcta"?: boolean;
        /**
          * Show the Headline?
         */
        "showheadline"?: boolean;
    }
    interface ArvestCardFullwidthProductFeatures {
        /**
          * Main title for the component
         */
        "cardTitle": string;
        /**
          * Description text
         */
        "description": string;
        /**
          * Icon links, in same order as icons (pipe separated, no spaces)
         */
        "iconTips": string;
        /**
          * Icon names to be displayed (pipe separated, no spaces)
         */
        "icons": string;
        /**
          * ID component
         */
        "identifier": string;
        /**
          * Optional list dscription text
         */
        "listDescription"?: string;
        /**
          * List items to be displayed (pipe separated, no spaces)
         */
        "listItems": string;
        /**
          * Primary CTA title
         */
        "primaryCtaTitle"?: string;
        /**
          * Primary CTA URL
         */
        "primaryCtaUrl"?: string;
        /**
          * Secondary CTA title
         */
        "secondaryCtaTitle"?: string;
        /**
          * Secondary CTA URL
         */
        "secondaryCtaUrl"?: string;
    }
    interface ArvestCarousel {
    }
    interface ArvestCloseButton {
        "label": string;
    }
    interface ArvestCollapse {
    }
    interface ArvestComparisonTable {
    }
    interface ArvestComparisonTableCell {
        "data"?: string | Array<any>;
        "variant": CellVariant;
    }
    interface ArvestComparisonTableHeadercard {
        "cardTitle": string;
        "cta": string;
        "description": string;
        "hascolor": boolean;
    }
    interface ArvestComparisonTableHeaders {
        "headers": Array<any>;
    }
    interface ArvestDebitCreditCardGrid {
        /**
          * Data Array to render Cards with.
         */
        "cardData": Array<any>;
    }
    interface ArvestDebitCreditCardSelector {
        /**
          * URL for background image
         */
        "bgimage"?: string;
        /**
          * Label text for card
         */
        "label"?: string;
        /**
          * Link CTA text
         */
        "linkcta": string;
        /**
          * Button CTA text
         */
        "selectButton"?: string;
        /**
          * Turn Button on/off
         */
        "showButton"?: boolean;
        /**
          * Turn Label on/off
         */
        "showLabel"?: boolean;
        /**
          * Turn Link on/off
         */
        "showLink"?: boolean;
    }
    interface ArvestDropdown {
        /**
          * Disable dropdown
         */
        "disabled": string;
        /**
          * ID for the dropdown *
         */
        "identifier": string;
        /**
          * Dropdown label text
         */
        "label": string;
        /**
          * Dropdown options '[{label: string, value: string, selected?: boolean}]' *
         */
        "options"?: string;
        /**
          * Enable fixed-height, scrollable dropdown *
         */
        "scrollEnabled": boolean;
        /**
          * Set the width of the dropdown. Can be any valid value for the width CSS property. *
         */
        "width": string;
    }
    interface ArvestDropdownOptions {
        /**
          * Unique identifier.
         */
        "identifier": string;
        /**
          * Set true to open options.
         */
        "open": boolean;
        /**
          * Dropdown options as a string '[{label: string, value: string, selected?: boolean}]'
         */
        "options"?: string;
        /**
          * Enable fixed-height, scrollable dropdown
         */
        "scrollEnabled": boolean;
        /**
          * Set the width of the dropdown, can be any valid css value for the width property.
         */
        "width": string;
    }
    interface ArvestFooter {
        "withnav"?: boolean;
    }
    interface ArvestFooterContent {
    }
    interface ArvestForm {
        /**
          * Submit URL for action attribute.
         */
        "action"?: string;
        "buttonText": string;
        "inline": boolean;
        /**
          * Method for action prop ex. "get" or "post".
         */
        "method"?: string;
    }
    interface ArvestFormAddress {
        /**
          * Google Maps API key.
         */
        "apiKey": string;
        /**
          * Address city
         */
        "city": string;
        /**
          * Should we include US territories in the states list?
         */
        "includeTerritories": false;
        /**
          * Address state
         */
        "stateAbbr": string;
        /**
          * Address street.
         */
        "street": string;
        /**
          * Address unit #
         */
        "unit": string;
        /**
          * Address zip code
         */
        "zip": string;
    }
    interface ArvestFormAutocomplete {
        /**
          * The aria-describedby attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute
         */
        "ariaDescribedBy"?: string;
        /**
          * The aria-label attribute is used to define a string that labels the current element. Use it in cases where a text label is not visible on the screen. If there is visible text labeling the element, use aria-labelledby instead. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute
         */
        "ariaLabel"?: string;
        /**
          * The aria-required attribute provides assistive technologies information indicating if a field is required or not. [Required]  More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-required_attribute
         */
        "ariaRequired": boolean;
        /**
          * Use autocomplete to improve automated assistance and the use of password managers More info here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * Is it disabled?
         */
        "disabled": false;
        /**
          * Give the Element a unique ID to match labels with form fields and enable functionality [Required]
         */
        "elemId": string;
        /**
          * Label describes the input field for the user and for screenreaders [Required]
         */
        "label": string;
        /**
          * Element name attribute.
         */
        "name": string;
        /**
          * Dropdown options '[{label: string, value: string, selected?: boolean}]'
         */
        "options": string;
        /**
          * Placeholders are optional and have been visually hidden from the component so any text rendered will not have an effect. This prop has been left in the event the design changes in the future.
         */
        "placeholder"?: string;
        /**
          * Is the form element required?
         */
        "required": boolean;
        /**
          * True for small display.
         */
        "small"?: string;
        /**
          * Initial value for field.
         */
        "value": string;
    }
    interface ArvestFormCheck {
        "ariaDescribedBy": string;
        "disabled"?: boolean;
        "inline"?: boolean;
        "label": string;
        "name": string;
        "options"?: string;
        "type": FormCheckboxType;
        "value"?: string;
    }
    interface ArvestFormDatePicker {
        /**
          * Is the input element disabled?
         */
        "disabled": boolean;
        /**
          * Component id
         */
        "identifier": string;
        /**
          * Define the label for the component
         */
        "label": string;
        /**
          * Maximum date available to pick (ex. 1900-01-01)
         */
        "max": string;
        /**
          * Minimum date available to pick (ex. 1900-01-01)
         */
        "min": string;
        /**
          * Name for the input element
         */
        "name": string;
        /**
          * Define the placeholder value for the input
         */
        "placeholder": string;
        /**
          * Is the input element required?
         */
        "required": boolean;
        /**
          * Assign a role to the component
         */
        "role"?: string;
        /**
          * Element value (ex. 1900-01-01)
         */
        "value"?: string;
    }
    interface ArvestFormRange {
        "label": string;
    }
    interface ArvestFormTextinput {
        /**
          * The aria-describedby attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute
         */
        "ariaDescribedBy"?: string;
        /**
          * The aria-label attribute is used to define a string that labels the current element. Use it in cases where a text label is not visible on the screen. If there is visible text labeling the element, use aria-labelledby instead. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute
         */
        "ariaLabel"?: string;
        /**
          * The aria-required attribute provides assistive technologies information indicating if a field is required or not. [Required]  More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-required_attribute
         */
        "ariaRequired": boolean;
        /**
          * Use autocomplete to improve automated assistance and the use of password managers More info here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * Is the input element disabled? Defaults to false.
         */
        "disabled": boolean;
        /**
          * Give the Element a unique ID to match labels with form fields and enable functionality [Required]
         */
        "elemId": string;
        /**
          * Prop for error message.
         */
        "error": string;
        /**
          * Regex filter for input value. Defaults to filter out special characters and underscores as per Arvest Bad Character List.
         */
        "filter": RegExp;
        /**
          * Label describes the input field for the user and for screenreaders [Required]
         */
        "label": string;
        /**
          * Prop to describe the text mask to be used.
         */
        "mask": string;
        /**
          * Maximum number of characters allowed.
         */
        "maxlength": number;
        "name": string;
        /**
          * Placeholders are optional and have been visually hidden from the component so any text rendered will not have an effect. This prop has been left in the event the design changes in the future.
         */
        "placeholder"?: string;
        /**
          * Is the input element required? Defaults to false.
         */
        "required": boolean;
        "small"?: string;
        /**
          * Type specifies what type of data should be entered into the field. Options are: email, password, text, and number. [Required]
         */
        "type": FormTextInputType;
        /**
          * Value of the input.
         */
        "value": string;
    }
    interface ArvestGrid {
    }
    interface ArvestIcon {
        "alt"?: string;
        "icon": string;
        "label"?: string;
    }
    interface ArvestJumbotron {
        /**
          * Body
         */
        "body"?: string;
        /**
          * Button Color
         */
        "buttoncolor": Color;
        /**
          * Headline
         */
        "headline"?: string;
        /**
          * Button Label
         */
        "label"?: string;
        /**
          * Subhead
         */
        "subhead"?: string;
    }
    interface ArvestList {
        /**
          * Index number for active element
         */
        "activetag"?: string;
        /**
          * Color for all elements
         */
        "color"?: Color;
        /**
          * Index number for disabled element
         */
        "disabledtag"?: string;
    }
    interface ArvestLogo {
        /**
          * Pass in a url as a string for a redirect. This is optional.
         */
        "url": string;
        /**
          * Pass in a variant to change the logo color. Options are white = "white", black = "black", and blue = "blue". This is not required. The default is white.
         */
        "variant": LogoColor;
    }
    interface ArvestMaxContainer {
    }
    interface ArvestMedia {
        "alt": string;
        "bodytext": string;
        "heading": string;
        "src": string;
    }
    interface ArvestModal {
        /**
          * Title at the top of the modal  *
         */
        "heading": string;
        /**
          * Modal size (small, large) *
         */
        "size": string;
    }
    interface ArvestModalFooter {
    }
    interface ArvestNav {
        "activeindex": number;
        /**
          * Navigation data array  *
         */
        "navData": INav;
        "searchbarlinks": string;
    }
    interface ArvestNavMainMenu {
        /**
          * Active tab with underline style
         */
        "activeIndex": number;
        /**
          * If true, change font colors for light mode
         */
        "isLightMode": boolean;
        /**
          * Navigation data array  *
         */
        "navData": string | INav;
        "navType": string;
    }
    interface ArvestNavMainlink {
        /**
          * If true, change to active styles
         */
        "isactive": boolean;
        /**
          * If true, change font colors for light mode
         */
        "islightmode": boolean;
        "mobile": boolean;
    }
    interface ArvestNavMicrosite {
        /**
          * Active tab that has the underline
         */
        "activeindex": number;
        /**
          * Navigation data array  *
         */
        "navData": INav;
        /**
          * Frequently asked questions for searchbar
         */
        "searchbarlinks": string;
    }
    interface ArvestOverlay {
        /**
          * If true, scrolling underneath the overlay is prevented.
         */
        "noscroll": true;
        /**
          * Set true to open the overlay and display contents. Set false to close overlay.
         */
        "visible": boolean;
    }
    interface ArvestPrimaryCarouselButtongroup {
        "ismobile": boolean;
        "slidePosition": number;
        "slides": string;
    }
    interface ArvestPrimaryCarouselMobilebtns {
        "color": Color;
        "isactive": boolean;
    }
    interface ArvestPrimaryHeroCarousel {
        "slides": string;
    }
    interface ArvestProgress {
        "haslabel"?: boolean;
        "height"?: string;
        "isanimated"?: boolean;
        "percentage"?: string;
    }
    interface ArvestResponsiveImage {
        /**
          * Alternative text for accesibility
         */
        "alt": string;
        "containerratio": string;
        "itemratio": string;
        /**
          * Image source link
         */
        "src": string;
    }
    interface ArvestSearchTextinput {
        "ariaDescribedBy": string;
        "ariaLabel": string;
        "elemId": string;
        "label": string;
        "placeholder"?: string;
        "small"?: string;
        "type": FormTextInputType;
    }
    interface ArvestSearchbar {
        "isMobile": boolean;
        /**
          * Array of links as json string.
         */
        "links": string;
    }
    interface ArvestSecondaryHero {
        "header": string;
    }
    interface ArvestSpinner {
        "isreverse"?: boolean;
    }
    interface ArvestStepper {
        /**
          * The step state, in order, comma separated, no spaces, max 5. (active, complete, incomplete)  *
         */
        "stepStates": string;
        /**
          * The displayed title for each step, in order, comma separated, no spaces, max 5.  *
         */
        "stepTitles": string;
        /**
          * The step URL, in order, comma separated, no spaces, max 5.  *
         */
        "stepUrls": string;
    }
    interface ArvestToast {
        "imgalt"?: string;
        "imgsrc"?: string;
        "show": boolean;
    }
    interface ArvestTooltip {
        /**
          * Show or hide the tooltip arrow.  *
         */
        "arrow": boolean;
        /**
          * CTA title Options:  (button or text) *
         */
        "ctaTitle"?: string;
        /**
          * Type of CTA enabled? Options:  (text, button) *
         */
        "ctaType"?: TooltipCta;
        /**
          * CTA full URL  *
         */
        "ctaUrl"?: string;
        /**
          * Tooltip body copy/message (no limit)
         */
        "message"?: string;
        /**
          * Set the position of the tooltip. Options:  (top-left, top-center, top-right, bottom-left, bottom-center, bottom-right) *
         */
        "position"?: TooltipPosition;
        /**
          * Show or hide the tooltip arrow.  *
         */
        "trigger"?: TooltipTrigger;
    }
    interface ArvestTypography {
        /**
          * Font Color
         */
        "color": Color;
        /**
          * Typography styles
         */
        "variant": TypographyVariants;
    }
    interface BootstrapAlert {
        /**
          * Change the color of the component using the Color enum
         */
        "color": Color;
    }
}
declare global {
    interface HTMLArvestAccordionElement extends Components.ArvestAccordion, HTMLStencilElement {
    }
    var HTMLArvestAccordionElement: {
        prototype: HTMLArvestAccordionElement;
        new (): HTMLArvestAccordionElement;
    };
    interface HTMLArvestAdFiveColElement extends Components.ArvestAdFiveCol, HTMLStencilElement {
    }
    var HTMLArvestAdFiveColElement: {
        prototype: HTMLArvestAdFiveColElement;
        new (): HTMLArvestAdFiveColElement;
    };
    interface HTMLArvestAdFourColElement extends Components.ArvestAdFourCol, HTMLStencilElement {
    }
    var HTMLArvestAdFourColElement: {
        prototype: HTMLArvestAdFourColElement;
        new (): HTMLArvestAdFourColElement;
    };
    interface HTMLArvestAlertElement extends Components.ArvestAlert, HTMLStencilElement {
    }
    var HTMLArvestAlertElement: {
        prototype: HTMLArvestAlertElement;
        new (): HTMLArvestAlertElement;
    };
    interface HTMLArvestBadgeElement extends Components.ArvestBadge, HTMLStencilElement {
    }
    var HTMLArvestBadgeElement: {
        prototype: HTMLArvestBadgeElement;
        new (): HTMLArvestBadgeElement;
    };
    interface HTMLArvestBreadcrumbElement extends Components.ArvestBreadcrumb, HTMLStencilElement {
    }
    var HTMLArvestBreadcrumbElement: {
        prototype: HTMLArvestBreadcrumbElement;
        new (): HTMLArvestBreadcrumbElement;
    };
    interface HTMLArvestButtonOutlineElement extends Components.ArvestButtonOutline, HTMLStencilElement {
    }
    var HTMLArvestButtonOutlineElement: {
        prototype: HTMLArvestButtonOutlineElement;
        new (): HTMLArvestButtonOutlineElement;
    };
    interface HTMLArvestButtonPrimaryElement extends Components.ArvestButtonPrimary, HTMLStencilElement {
    }
    var HTMLArvestButtonPrimaryElement: {
        prototype: HTMLArvestButtonPrimaryElement;
        new (): HTMLArvestButtonPrimaryElement;
    };
    interface HTMLArvestButtonSecondaryElement extends Components.ArvestButtonSecondary, HTMLStencilElement {
    }
    var HTMLArvestButtonSecondaryElement: {
        prototype: HTMLArvestButtonSecondaryElement;
        new (): HTMLArvestButtonSecondaryElement;
    };
    interface HTMLArvestButtonSecondaryReverseElement extends Components.ArvestButtonSecondaryReverse, HTMLStencilElement {
    }
    var HTMLArvestButtonSecondaryReverseElement: {
        prototype: HTMLArvestButtonSecondaryReverseElement;
        new (): HTMLArvestButtonSecondaryReverseElement;
    };
    interface HTMLArvestButtonTertiaryElement extends Components.ArvestButtonTertiary, HTMLStencilElement {
    }
    var HTMLArvestButtonTertiaryElement: {
        prototype: HTMLArvestButtonTertiaryElement;
        new (): HTMLArvestButtonTertiaryElement;
    };
    interface HTMLArvestButtonTwoUpElement extends Components.ArvestButtonTwoUp, HTMLStencilElement {
    }
    var HTMLArvestButtonTwoUpElement: {
        prototype: HTMLArvestButtonTwoUpElement;
        new (): HTMLArvestButtonTwoUpElement;
    };
    interface HTMLArvestButtongroupElement extends Components.ArvestButtongroup, HTMLStencilElement {
    }
    var HTMLArvestButtongroupElement: {
        prototype: HTMLArvestButtongroupElement;
        new (): HTMLArvestButtongroupElement;
    };
    interface HTMLArvestCardElement extends Components.ArvestCard, HTMLStencilElement {
    }
    var HTMLArvestCardElement: {
        prototype: HTMLArvestCardElement;
        new (): HTMLArvestCardElement;
    };
    interface HTMLArvestCard3ColTextCtaElement extends Components.ArvestCard3ColTextCta, HTMLStencilElement {
    }
    var HTMLArvestCard3ColTextCtaElement: {
        prototype: HTMLArvestCard3ColTextCtaElement;
        new (): HTMLArvestCard3ColTextCtaElement;
    };
    interface HTMLArvestCard3ColTextImageElement extends Components.ArvestCard3ColTextImage, HTMLStencilElement {
    }
    var HTMLArvestCard3ColTextImageElement: {
        prototype: HTMLArvestCard3ColTextImageElement;
        new (): HTMLArvestCard3ColTextImageElement;
    };
    interface HTMLArvestCard3ColTextImgCtaElement extends Components.ArvestCard3ColTextImgCta, HTMLStencilElement {
    }
    var HTMLArvestCard3ColTextImgCtaElement: {
        prototype: HTMLArvestCard3ColTextImgCtaElement;
        new (): HTMLArvestCard3ColTextImgCtaElement;
    };
    interface HTMLArvestCard4ColTextGlyphElement extends Components.ArvestCard4ColTextGlyph, HTMLStencilElement {
    }
    var HTMLArvestCard4ColTextGlyphElement: {
        prototype: HTMLArvestCard4ColTextGlyphElement;
        new (): HTMLArvestCard4ColTextGlyphElement;
    };
    interface HTMLArvestCard4ColTextImageElement extends Components.ArvestCard4ColTextImage, HTMLStencilElement {
    }
    var HTMLArvestCard4ColTextImageElement: {
        prototype: HTMLArvestCard4ColTextImageElement;
        new (): HTMLArvestCard4ColTextImageElement;
    };
    interface HTMLArvestCard4ColTextImgCtaElement extends Components.ArvestCard4ColTextImgCta, HTMLStencilElement {
    }
    var HTMLArvestCard4ColTextImgCtaElement: {
        prototype: HTMLArvestCard4ColTextImgCtaElement;
        new (): HTMLArvestCard4ColTextImgCtaElement;
    };
    interface HTMLArvestCardFullwidthElement extends Components.ArvestCardFullwidth, HTMLStencilElement {
    }
    var HTMLArvestCardFullwidthElement: {
        prototype: HTMLArvestCardFullwidthElement;
        new (): HTMLArvestCardFullwidthElement;
    };
    interface HTMLArvestCardFullwidthProductFeaturesElement extends Components.ArvestCardFullwidthProductFeatures, HTMLStencilElement {
    }
    var HTMLArvestCardFullwidthProductFeaturesElement: {
        prototype: HTMLArvestCardFullwidthProductFeaturesElement;
        new (): HTMLArvestCardFullwidthProductFeaturesElement;
    };
    interface HTMLArvestCarouselElement extends Components.ArvestCarousel, HTMLStencilElement {
    }
    var HTMLArvestCarouselElement: {
        prototype: HTMLArvestCarouselElement;
        new (): HTMLArvestCarouselElement;
    };
    interface HTMLArvestCloseButtonElement extends Components.ArvestCloseButton, HTMLStencilElement {
    }
    var HTMLArvestCloseButtonElement: {
        prototype: HTMLArvestCloseButtonElement;
        new (): HTMLArvestCloseButtonElement;
    };
    interface HTMLArvestCollapseElement extends Components.ArvestCollapse, HTMLStencilElement {
    }
    var HTMLArvestCollapseElement: {
        prototype: HTMLArvestCollapseElement;
        new (): HTMLArvestCollapseElement;
    };
    interface HTMLArvestComparisonTableElement extends Components.ArvestComparisonTable, HTMLStencilElement {
    }
    var HTMLArvestComparisonTableElement: {
        prototype: HTMLArvestComparisonTableElement;
        new (): HTMLArvestComparisonTableElement;
    };
    interface HTMLArvestComparisonTableCellElement extends Components.ArvestComparisonTableCell, HTMLStencilElement {
    }
    var HTMLArvestComparisonTableCellElement: {
        prototype: HTMLArvestComparisonTableCellElement;
        new (): HTMLArvestComparisonTableCellElement;
    };
    interface HTMLArvestComparisonTableHeadercardElement extends Components.ArvestComparisonTableHeadercard, HTMLStencilElement {
    }
    var HTMLArvestComparisonTableHeadercardElement: {
        prototype: HTMLArvestComparisonTableHeadercardElement;
        new (): HTMLArvestComparisonTableHeadercardElement;
    };
    interface HTMLArvestComparisonTableHeadersElement extends Components.ArvestComparisonTableHeaders, HTMLStencilElement {
    }
    var HTMLArvestComparisonTableHeadersElement: {
        prototype: HTMLArvestComparisonTableHeadersElement;
        new (): HTMLArvestComparisonTableHeadersElement;
    };
    interface HTMLArvestDebitCreditCardGridElement extends Components.ArvestDebitCreditCardGrid, HTMLStencilElement {
    }
    var HTMLArvestDebitCreditCardGridElement: {
        prototype: HTMLArvestDebitCreditCardGridElement;
        new (): HTMLArvestDebitCreditCardGridElement;
    };
    interface HTMLArvestDebitCreditCardSelectorElement extends Components.ArvestDebitCreditCardSelector, HTMLStencilElement {
    }
    var HTMLArvestDebitCreditCardSelectorElement: {
        prototype: HTMLArvestDebitCreditCardSelectorElement;
        new (): HTMLArvestDebitCreditCardSelectorElement;
    };
    interface HTMLArvestDropdownElement extends Components.ArvestDropdown, HTMLStencilElement {
    }
    var HTMLArvestDropdownElement: {
        prototype: HTMLArvestDropdownElement;
        new (): HTMLArvestDropdownElement;
    };
    interface HTMLArvestDropdownOptionsElement extends Components.ArvestDropdownOptions, HTMLStencilElement {
    }
    var HTMLArvestDropdownOptionsElement: {
        prototype: HTMLArvestDropdownOptionsElement;
        new (): HTMLArvestDropdownOptionsElement;
    };
    interface HTMLArvestFooterElement extends Components.ArvestFooter, HTMLStencilElement {
    }
    var HTMLArvestFooterElement: {
        prototype: HTMLArvestFooterElement;
        new (): HTMLArvestFooterElement;
    };
    interface HTMLArvestFooterContentElement extends Components.ArvestFooterContent, HTMLStencilElement {
    }
    var HTMLArvestFooterContentElement: {
        prototype: HTMLArvestFooterContentElement;
        new (): HTMLArvestFooterContentElement;
    };
    interface HTMLArvestFormElement extends Components.ArvestForm, HTMLStencilElement {
    }
    var HTMLArvestFormElement: {
        prototype: HTMLArvestFormElement;
        new (): HTMLArvestFormElement;
    };
    interface HTMLArvestFormAddressElement extends Components.ArvestFormAddress, HTMLStencilElement {
    }
    var HTMLArvestFormAddressElement: {
        prototype: HTMLArvestFormAddressElement;
        new (): HTMLArvestFormAddressElement;
    };
    interface HTMLArvestFormAutocompleteElement extends Components.ArvestFormAutocomplete, HTMLStencilElement {
    }
    var HTMLArvestFormAutocompleteElement: {
        prototype: HTMLArvestFormAutocompleteElement;
        new (): HTMLArvestFormAutocompleteElement;
    };
    interface HTMLArvestFormCheckElement extends Components.ArvestFormCheck, HTMLStencilElement {
    }
    var HTMLArvestFormCheckElement: {
        prototype: HTMLArvestFormCheckElement;
        new (): HTMLArvestFormCheckElement;
    };
    interface HTMLArvestFormDatePickerElement extends Components.ArvestFormDatePicker, HTMLStencilElement {
    }
    var HTMLArvestFormDatePickerElement: {
        prototype: HTMLArvestFormDatePickerElement;
        new (): HTMLArvestFormDatePickerElement;
    };
    interface HTMLArvestFormRangeElement extends Components.ArvestFormRange, HTMLStencilElement {
    }
    var HTMLArvestFormRangeElement: {
        prototype: HTMLArvestFormRangeElement;
        new (): HTMLArvestFormRangeElement;
    };
    interface HTMLArvestFormTextinputElement extends Components.ArvestFormTextinput, HTMLStencilElement {
    }
    var HTMLArvestFormTextinputElement: {
        prototype: HTMLArvestFormTextinputElement;
        new (): HTMLArvestFormTextinputElement;
    };
    interface HTMLArvestGridElement extends Components.ArvestGrid, HTMLStencilElement {
    }
    var HTMLArvestGridElement: {
        prototype: HTMLArvestGridElement;
        new (): HTMLArvestGridElement;
    };
    interface HTMLArvestIconElement extends Components.ArvestIcon, HTMLStencilElement {
    }
    var HTMLArvestIconElement: {
        prototype: HTMLArvestIconElement;
        new (): HTMLArvestIconElement;
    };
    interface HTMLArvestJumbotronElement extends Components.ArvestJumbotron, HTMLStencilElement {
    }
    var HTMLArvestJumbotronElement: {
        prototype: HTMLArvestJumbotronElement;
        new (): HTMLArvestJumbotronElement;
    };
    interface HTMLArvestListElement extends Components.ArvestList, HTMLStencilElement {
    }
    var HTMLArvestListElement: {
        prototype: HTMLArvestListElement;
        new (): HTMLArvestListElement;
    };
    interface HTMLArvestLogoElement extends Components.ArvestLogo, HTMLStencilElement {
    }
    var HTMLArvestLogoElement: {
        prototype: HTMLArvestLogoElement;
        new (): HTMLArvestLogoElement;
    };
    interface HTMLArvestMaxContainerElement extends Components.ArvestMaxContainer, HTMLStencilElement {
    }
    var HTMLArvestMaxContainerElement: {
        prototype: HTMLArvestMaxContainerElement;
        new (): HTMLArvestMaxContainerElement;
    };
    interface HTMLArvestMediaElement extends Components.ArvestMedia, HTMLStencilElement {
    }
    var HTMLArvestMediaElement: {
        prototype: HTMLArvestMediaElement;
        new (): HTMLArvestMediaElement;
    };
    interface HTMLArvestModalElement extends Components.ArvestModal, HTMLStencilElement {
    }
    var HTMLArvestModalElement: {
        prototype: HTMLArvestModalElement;
        new (): HTMLArvestModalElement;
    };
    interface HTMLArvestModalFooterElement extends Components.ArvestModalFooter, HTMLStencilElement {
    }
    var HTMLArvestModalFooterElement: {
        prototype: HTMLArvestModalFooterElement;
        new (): HTMLArvestModalFooterElement;
    };
    interface HTMLArvestNavElement extends Components.ArvestNav, HTMLStencilElement {
    }
    var HTMLArvestNavElement: {
        prototype: HTMLArvestNavElement;
        new (): HTMLArvestNavElement;
    };
    interface HTMLArvestNavMainMenuElement extends Components.ArvestNavMainMenu, HTMLStencilElement {
    }
    var HTMLArvestNavMainMenuElement: {
        prototype: HTMLArvestNavMainMenuElement;
        new (): HTMLArvestNavMainMenuElement;
    };
    interface HTMLArvestNavMainlinkElement extends Components.ArvestNavMainlink, HTMLStencilElement {
    }
    var HTMLArvestNavMainlinkElement: {
        prototype: HTMLArvestNavMainlinkElement;
        new (): HTMLArvestNavMainlinkElement;
    };
    interface HTMLArvestNavMicrositeElement extends Components.ArvestNavMicrosite, HTMLStencilElement {
    }
    var HTMLArvestNavMicrositeElement: {
        prototype: HTMLArvestNavMicrositeElement;
        new (): HTMLArvestNavMicrositeElement;
    };
    interface HTMLArvestOverlayElement extends Components.ArvestOverlay, HTMLStencilElement {
    }
    var HTMLArvestOverlayElement: {
        prototype: HTMLArvestOverlayElement;
        new (): HTMLArvestOverlayElement;
    };
    interface HTMLArvestPrimaryCarouselButtongroupElement extends Components.ArvestPrimaryCarouselButtongroup, HTMLStencilElement {
    }
    var HTMLArvestPrimaryCarouselButtongroupElement: {
        prototype: HTMLArvestPrimaryCarouselButtongroupElement;
        new (): HTMLArvestPrimaryCarouselButtongroupElement;
    };
    interface HTMLArvestPrimaryCarouselMobilebtnsElement extends Components.ArvestPrimaryCarouselMobilebtns, HTMLStencilElement {
    }
    var HTMLArvestPrimaryCarouselMobilebtnsElement: {
        prototype: HTMLArvestPrimaryCarouselMobilebtnsElement;
        new (): HTMLArvestPrimaryCarouselMobilebtnsElement;
    };
    interface HTMLArvestPrimaryHeroCarouselElement extends Components.ArvestPrimaryHeroCarousel, HTMLStencilElement {
    }
    var HTMLArvestPrimaryHeroCarouselElement: {
        prototype: HTMLArvestPrimaryHeroCarouselElement;
        new (): HTMLArvestPrimaryHeroCarouselElement;
    };
    interface HTMLArvestProgressElement extends Components.ArvestProgress, HTMLStencilElement {
    }
    var HTMLArvestProgressElement: {
        prototype: HTMLArvestProgressElement;
        new (): HTMLArvestProgressElement;
    };
    interface HTMLArvestResponsiveImageElement extends Components.ArvestResponsiveImage, HTMLStencilElement {
    }
    var HTMLArvestResponsiveImageElement: {
        prototype: HTMLArvestResponsiveImageElement;
        new (): HTMLArvestResponsiveImageElement;
    };
    interface HTMLArvestSearchTextinputElement extends Components.ArvestSearchTextinput, HTMLStencilElement {
    }
    var HTMLArvestSearchTextinputElement: {
        prototype: HTMLArvestSearchTextinputElement;
        new (): HTMLArvestSearchTextinputElement;
    };
    interface HTMLArvestSearchbarElement extends Components.ArvestSearchbar, HTMLStencilElement {
    }
    var HTMLArvestSearchbarElement: {
        prototype: HTMLArvestSearchbarElement;
        new (): HTMLArvestSearchbarElement;
    };
    interface HTMLArvestSecondaryHeroElement extends Components.ArvestSecondaryHero, HTMLStencilElement {
    }
    var HTMLArvestSecondaryHeroElement: {
        prototype: HTMLArvestSecondaryHeroElement;
        new (): HTMLArvestSecondaryHeroElement;
    };
    interface HTMLArvestSpinnerElement extends Components.ArvestSpinner, HTMLStencilElement {
    }
    var HTMLArvestSpinnerElement: {
        prototype: HTMLArvestSpinnerElement;
        new (): HTMLArvestSpinnerElement;
    };
    interface HTMLArvestStepperElement extends Components.ArvestStepper, HTMLStencilElement {
    }
    var HTMLArvestStepperElement: {
        prototype: HTMLArvestStepperElement;
        new (): HTMLArvestStepperElement;
    };
    interface HTMLArvestToastElement extends Components.ArvestToast, HTMLStencilElement {
    }
    var HTMLArvestToastElement: {
        prototype: HTMLArvestToastElement;
        new (): HTMLArvestToastElement;
    };
    interface HTMLArvestTooltipElement extends Components.ArvestTooltip, HTMLStencilElement {
    }
    var HTMLArvestTooltipElement: {
        prototype: HTMLArvestTooltipElement;
        new (): HTMLArvestTooltipElement;
    };
    interface HTMLArvestTypographyElement extends Components.ArvestTypography, HTMLStencilElement {
    }
    var HTMLArvestTypographyElement: {
        prototype: HTMLArvestTypographyElement;
        new (): HTMLArvestTypographyElement;
    };
    interface HTMLBootstrapAlertElement extends Components.BootstrapAlert, HTMLStencilElement {
    }
    var HTMLBootstrapAlertElement: {
        prototype: HTMLBootstrapAlertElement;
        new (): HTMLBootstrapAlertElement;
    };
    interface HTMLElementTagNameMap {
        "arvest-accordion": HTMLArvestAccordionElement;
        "arvest-ad-five-col": HTMLArvestAdFiveColElement;
        "arvest-ad-four-col": HTMLArvestAdFourColElement;
        "arvest-alert": HTMLArvestAlertElement;
        "arvest-badge": HTMLArvestBadgeElement;
        "arvest-breadcrumb": HTMLArvestBreadcrumbElement;
        "arvest-button-outline": HTMLArvestButtonOutlineElement;
        "arvest-button-primary": HTMLArvestButtonPrimaryElement;
        "arvest-button-secondary": HTMLArvestButtonSecondaryElement;
        "arvest-button-secondary-reverse": HTMLArvestButtonSecondaryReverseElement;
        "arvest-button-tertiary": HTMLArvestButtonTertiaryElement;
        "arvest-button-two-up": HTMLArvestButtonTwoUpElement;
        "arvest-buttongroup": HTMLArvestButtongroupElement;
        "arvest-card": HTMLArvestCardElement;
        "arvest-card-3-col-text-cta": HTMLArvestCard3ColTextCtaElement;
        "arvest-card-3-col-text-image": HTMLArvestCard3ColTextImageElement;
        "arvest-card-3-col-text-img-cta": HTMLArvestCard3ColTextImgCtaElement;
        "arvest-card-4-col-text-glyph": HTMLArvestCard4ColTextGlyphElement;
        "arvest-card-4-col-text-image": HTMLArvestCard4ColTextImageElement;
        "arvest-card-4-col-text-img-cta": HTMLArvestCard4ColTextImgCtaElement;
        "arvest-card-fullwidth": HTMLArvestCardFullwidthElement;
        "arvest-card-fullwidth-product-features": HTMLArvestCardFullwidthProductFeaturesElement;
        "arvest-carousel": HTMLArvestCarouselElement;
        "arvest-close-button": HTMLArvestCloseButtonElement;
        "arvest-collapse": HTMLArvestCollapseElement;
        "arvest-comparison-table": HTMLArvestComparisonTableElement;
        "arvest-comparison-table-cell": HTMLArvestComparisonTableCellElement;
        "arvest-comparison-table-headercard": HTMLArvestComparisonTableHeadercardElement;
        "arvest-comparison-table-headers": HTMLArvestComparisonTableHeadersElement;
        "arvest-debit-credit-card-grid": HTMLArvestDebitCreditCardGridElement;
        "arvest-debit-credit-card-selector": HTMLArvestDebitCreditCardSelectorElement;
        "arvest-dropdown": HTMLArvestDropdownElement;
        "arvest-dropdown-options": HTMLArvestDropdownOptionsElement;
        "arvest-footer": HTMLArvestFooterElement;
        "arvest-footer-content": HTMLArvestFooterContentElement;
        "arvest-form": HTMLArvestFormElement;
        "arvest-form-address": HTMLArvestFormAddressElement;
        "arvest-form-autocomplete": HTMLArvestFormAutocompleteElement;
        "arvest-form-check": HTMLArvestFormCheckElement;
        "arvest-form-date-picker": HTMLArvestFormDatePickerElement;
        "arvest-form-range": HTMLArvestFormRangeElement;
        "arvest-form-textinput": HTMLArvestFormTextinputElement;
        "arvest-grid": HTMLArvestGridElement;
        "arvest-icon": HTMLArvestIconElement;
        "arvest-jumbotron": HTMLArvestJumbotronElement;
        "arvest-list": HTMLArvestListElement;
        "arvest-logo": HTMLArvestLogoElement;
        "arvest-max-container": HTMLArvestMaxContainerElement;
        "arvest-media": HTMLArvestMediaElement;
        "arvest-modal": HTMLArvestModalElement;
        "arvest-modal-footer": HTMLArvestModalFooterElement;
        "arvest-nav": HTMLArvestNavElement;
        "arvest-nav-main-menu": HTMLArvestNavMainMenuElement;
        "arvest-nav-mainlink": HTMLArvestNavMainlinkElement;
        "arvest-nav-microsite": HTMLArvestNavMicrositeElement;
        "arvest-overlay": HTMLArvestOverlayElement;
        "arvest-primary-carousel-buttongroup": HTMLArvestPrimaryCarouselButtongroupElement;
        "arvest-primary-carousel-mobilebtns": HTMLArvestPrimaryCarouselMobilebtnsElement;
        "arvest-primary-hero-carousel": HTMLArvestPrimaryHeroCarouselElement;
        "arvest-progress": HTMLArvestProgressElement;
        "arvest-responsive-image": HTMLArvestResponsiveImageElement;
        "arvest-search-textinput": HTMLArvestSearchTextinputElement;
        "arvest-searchbar": HTMLArvestSearchbarElement;
        "arvest-secondary-hero": HTMLArvestSecondaryHeroElement;
        "arvest-spinner": HTMLArvestSpinnerElement;
        "arvest-stepper": HTMLArvestStepperElement;
        "arvest-toast": HTMLArvestToastElement;
        "arvest-tooltip": HTMLArvestTooltipElement;
        "arvest-typography": HTMLArvestTypographyElement;
        "bootstrap-alert": HTMLBootstrapAlertElement;
    }
}
declare namespace LocalJSX {
    interface ArvestAccordion {
        /**
          * Accordion title
         */
        "accordiontitle"?: string;
        "activeCol"?: number;
        /**
          * 2D Array of columns and cells
         */
        "cols"?: Array<Array<any>>;
        /**
          * Array of row titles
         */
        "rowtitles"?: Array<any>;
        /**
          * Accordion type. Options are 'content', 'table-simple', 'nav', and 'mobileNav'
         */
        "type"?: string;
    }
    interface ArvestAdFiveCol {
        /**
          * Change the background image using bgimage and a full URL as a string. Example: <arvest-ad-five-col bgimage="https://www.arvest.com/someimage.jpg">  The default background is a geometric pattern.
         */
        "bgimage"?: string;
        /**
          * Change the background color. Color options: cobalt, ocean, navy. Default is cobalt.
         */
        "color"?: string;
        /**
          * CTA / Button text
         */
        "ctatitle"?: string;
        "defaultbg"?: string;
        /**
          * Change the opacity of the background image. Use a decimal between 0-1. Default value is 0.5 (50%). [optional]
         */
        "opacity"?: string;
        /**
          * Ratio options are 5:2 (52), 2:1 (21)
         */
        "ratio"?: string;
        /**
          * Turn CTA on/off
         */
        "showcta"?: boolean;
        /**
          * CTA / Button URL
         */
        "url"?: string;
    }
    interface ArvestAdFourCol {
        /**
          * Change the background image using bgimage and a full URL as a string. Example: <arvest-ad-four-col bgimage="https://www.arvest.com/someimage.jpg">  The default background is a geometric pattern.
         */
        "bgimage"?: string;
        /**
          * Change the background color. Color options: cobalt, ocean, navy. Default is cobalt.
         */
        "color"?: string;
        /**
          * CTA / Button text
         */
        "ctatitle"?: string;
        "defaultbg"?: string;
        /**
          * Change the opacity of the background image. Use a decimal between 0-1. Default value is 0.5 (50%). [optional]
         */
        "opacity"?: string;
        /**
          * Turn the CTA on/off
         */
        "showcta"?: boolean;
        /**
          * Optional sizes are small and large
         */
        "size"?: string;
        /**
          * CTA / Button URL
         */
        "url"?: string;
    }
    interface ArvestAlert {
        /**
          * Banner: passing this as true will display the alert as a banner at the top of the page
         */
        "banner"?: boolean;
        /**
          * Dismissed
         */
        "dismissed"?: boolean;
        /**
          * Options for the Alert component The types of available alerts are default, alert, confirmation, caution and info. The styles and icons are tied to that selection. [Required]
         */
        "type"?: string;
    }
    interface ArvestBadge {
        /**
          * Background color of the badge
         */
        "color"?: BadgeColor;
    }
    interface ArvestBreadcrumb {
        /**
          * Links is an array of routes, it has the following structure: [{"title":"string label","url":"string url"},]
         */
        "links"?: string;
    }
    interface ArvestButtonOutline {
        "label"?: string;
    }
    interface ArvestButtonPrimary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button. Must not be more than 25 characters. [Required]
         */
        "label"?: string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
        /**
          * Custom button width
         */
        "width"?: number;
    }
    interface ArvestButtonSecondary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, button will use ad style
         */
        "isad"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button. Must not be more than 25 characters. [Required]
         */
        "label"?: string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
        /**
          * Custom button width
         */
        "width"?: number;
    }
    interface ArvestButtonSecondaryReverse {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * If true, spinner for loading
         */
        "isloading"?: boolean;
        /**
          * If true, button size will be smaller
         */
        "issmall"?: boolean;
        /**
          * Text inside the button [Required]
         */
        "label"?: string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
    }
    interface ArvestButtonTertiary {
        /**
          * If true, disable mouse events
         */
        "disabled"?: boolean;
        /**
          * Text inside the button. Must not be more than 30 characters [Required]
         */
        "label"?: string;
        /**
          * Change the type of the component using the ButtonType enum
         */
        "type"?: ButtonType;
    }
    interface ArvestButtonTwoUp {
        /**
          * Use small button variant?  *
         */
        "isSmall"?: boolean;
        /**
          * Emit event when primary button is clicked *
         */
        "onClickPrimary"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Emit event when secondary button is clicked *
         */
        "onClickSecondary"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Primary button title.  *
         */
        "primaryTitle"?: string;
        /**
          * Primary button url.  *
         */
        "primaryUrl"?: string;
        /**
          * Secondary button title.  *
         */
        "secondaryTitle"?: string;
        /**
          * Secondary button url.  *
         */
        "secondaryUrl"?: string;
    }
    interface ArvestButtongroup {
        /**
          * Aria Label for screen readers [Required]
         */
        "ariaLabel"?: string;
        /**
          * Change the color of the component using the Color enum
         */
        "color"?: Color;
    }
    interface ArvestCard {
        /**
          * Alt text for image
         */
        "cardimgalt"?: string;
        /**
          * URL for Image
         */
        "cardimgsrc"?: string;
        /**
          * Body text
         */
        "cardtext"?: string;
        /**
          * Title text
         */
        "cardtitle"?: string;
    }
    interface ArvestCard3ColTextCta {
        /**
          * Card four body text [Required]
         */
        "bodyfour"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Card four cta label
         */
        "ctafour"?: string;
        /**
          * Card one cta label
         */
        "ctaone"?: string;
        /**
          * Card three cta label
         */
        "ctathree"?: string;
        /**
          * Card two cta label
         */
        "ctatwo"?: string;
        /**
          * Card four cta URL
         */
        "linkfour"?: string;
        /**
          * Card one cta URL
         */
        "linkone"?: string;
        /**
          * Card three cta URL
         */
        "linkthree"?: string;
        /**
          * Card two cta URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCard3ColTextImage {
        /**
          * Card four image alt text [Required]
         */
        "altfour"?: string;
        /**
          * Card one image alt text [Required]
         */
        "altone"?: string;
        /**
          * Card three image alt text [Required]
         */
        "altthree"?: string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo"?: string;
        /**
          * Card four body text [Required]
         */
        "bodyfour"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * CTA Link [Required]
         */
        "ctalink"?: string;
        /**
          * Card four image URL [Required]
         */
        "imagefour"?: string;
        /**
          * Card one image URL [Required]
         */
        "imageone"?: string;
        /**
          * Card three image URL [Required]
         */
        "imagethree"?: string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo"?: string;
        /**
          * Card four link URL
         */
        "linkfour"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCard3ColTextImgCta {
        /**
          * Card four image alt text [Required]
         */
        "altfour"?: string;
        /**
          * Card one image alt text [Required]
         */
        "altone"?: string;
        /**
          * Card three image alt text [Required]
         */
        "altthree"?: string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo"?: string;
        /**
          * Card four body text [Required]
         */
        "bodyfour"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Card one cta label
         */
        "ctafour"?: string;
        /**
          * Card one cta label
         */
        "ctaone"?: string;
        /**
          * Card one cta label
         */
        "ctathree"?: string;
        /**
          * Card one cta label
         */
        "ctatwo"?: string;
        /**
          * Card four image URL [Required]
         */
        "imagefour"?: string;
        /**
          * Card one image URL [Required]
         */
        "imageone"?: string;
        /**
          * Card three image URL [Required]
         */
        "imagethree"?: string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo"?: string;
        /**
          * Card four link URL
         */
        "linkfour"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card four title [Required]
         */
        "titlefour"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCard4ColTextGlyph {
        /**
          * Card one glyph alt text [Required]
         */
        "altone"?: string;
        /**
          * Card three glyph alt text [Required]
         */
        "altthree"?: string;
        /**
          * Card two glyph alt text [Required]
         */
        "alttwo"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCard4ColTextImage {
        /**
          * Card one image alt text [Required]
         */
        "altone"?: string;
        /**
          * Card three image alt text [Required]
         */
        "altthree"?: string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * CTA Link
         */
        "ctalink"?: string;
        /**
          * Card one image URL [Required]
         */
        "imageone"?: string;
        /**
          * Card three image URL [Required]
         */
        "imagethree"?: string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo"?: string;
        /**
          * Card one link URL
         */
        "linkone"?: string;
        /**
          * Card three link URL
         */
        "linkthree"?: string;
        /**
          * Card two link URL
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCard4ColTextImgCta {
        /**
          * Card one image alt text [Required]
         */
        "altone"?: string;
        /**
          * Card three image alt text [Required]
         */
        "altthree"?: string;
        /**
          * Card two image alt text [Required]
         */
        "alttwo"?: string;
        /**
          * Card one body text [Required]
         */
        "bodyone"?: string;
        /**
          * Card three body text [Required]
         */
        "bodythree"?: string;
        /**
          * Card two body text [Required]
         */
        "bodytwo"?: string;
        /**
          * Card one CTA Text [Required]
         */
        "ctaone"?: string;
        /**
          * Card three CTA Text [Required]
         */
        "ctathree"?: string;
        /**
          * Card two CTA Text [Required]
         */
        "ctatwo"?: string;
        /**
          * Card one image URL [Required]
         */
        "imageone"?: string;
        /**
          * Card three image URL [Required]
         */
        "imagethree"?: string;
        /**
          * Card two image URL [Required]
         */
        "imagetwo"?: string;
        /**
          * Card one link URL [Required]
         */
        "linkone"?: string;
        /**
          * Card three link URL [Required]
         */
        "linkthree"?: string;
        /**
          * Card two link URL [Required]
         */
        "linktwo"?: string;
        /**
          * Main headline for the component
         */
        "mainheadline"?: string;
        /**
          * Card one title [Required]
         */
        "titleone"?: string;
        /**
          * Card three title [Required]
         */
        "titlethree"?: string;
        /**
          * Card two title [Required]
         */
        "titletwo"?: string;
    }
    interface ArvestCardFullwidth {
        /**
          * Body Text
         */
        "body"?: string;
        /**
          * Label for the CTA
         */
        "ctalabel"?: string;
        /**
          * Headline
         */
        "headline"?: string;
        /**
          * Show the Body Text?
         */
        "showbody"?: boolean;
        /**
          * Show the CTA Link?
         */
        "showcta"?: boolean;
        /**
          * Show the Headline?
         */
        "showheadline"?: boolean;
    }
    interface ArvestCardFullwidthProductFeatures {
        /**
          * Main title for the component
         */
        "cardTitle"?: string;
        /**
          * Description text
         */
        "description"?: string;
        /**
          * Icon links, in same order as icons (pipe separated, no spaces)
         */
        "iconTips"?: string;
        /**
          * Icon names to be displayed (pipe separated, no spaces)
         */
        "icons"?: string;
        /**
          * ID component
         */
        "identifier"?: string;
        /**
          * Optional list dscription text
         */
        "listDescription"?: string;
        /**
          * List items to be displayed (pipe separated, no spaces)
         */
        "listItems"?: string;
        /**
          * Primary CTA title
         */
        "primaryCtaTitle"?: string;
        /**
          * Primary CTA URL
         */
        "primaryCtaUrl"?: string;
        /**
          * Secondary CTA title
         */
        "secondaryCtaTitle"?: string;
        /**
          * Secondary CTA URL
         */
        "secondaryCtaUrl"?: string;
    }
    interface ArvestCarousel {
    }
    interface ArvestCloseButton {
        "label"?: string;
    }
    interface ArvestCollapse {
    }
    interface ArvestComparisonTable {
    }
    interface ArvestComparisonTableCell {
        "data"?: string | Array<any>;
        "variant"?: CellVariant;
    }
    interface ArvestComparisonTableHeadercard {
        "cardTitle"?: string;
        "cta"?: string;
        "description"?: string;
        "hascolor"?: boolean;
    }
    interface ArvestComparisonTableHeaders {
        "headers"?: Array<any>;
        "onSlidermoved"?: (event: CustomEvent<number>) => void;
    }
    interface ArvestDebitCreditCardGrid {
        /**
          * Data Array to render Cards with.
         */
        "cardData"?: Array<any>;
    }
    interface ArvestDebitCreditCardSelector {
        /**
          * URL for background image
         */
        "bgimage"?: string;
        /**
          * Label text for card
         */
        "label"?: string;
        /**
          * Link CTA text
         */
        "linkcta"?: string;
        /**
          * Button CTA text
         */
        "selectButton"?: string;
        /**
          * Turn Button on/off
         */
        "showButton"?: boolean;
        /**
          * Turn Label on/off
         */
        "showLabel"?: boolean;
        /**
          * Turn Link on/off
         */
        "showLink"?: boolean;
    }
    interface ArvestDropdown {
        /**
          * Disable dropdown
         */
        "disabled"?: string;
        /**
          * ID for the dropdown *
         */
        "identifier"?: string;
        /**
          * Dropdown label text
         */
        "label"?: string;
        /**
          * Event emitted when an options is chosen from the dropdown. Data payload is an object: { label: string, value: string }.
         */
        "onDropdownSelectValue"?: (event: CustomEvent<IFormDropdownOption>) => void;
        /**
          * Dropdown options '[{label: string, value: string, selected?: boolean}]' *
         */
        "options"?: string;
        /**
          * Enable fixed-height, scrollable dropdown *
         */
        "scrollEnabled"?: boolean;
        /**
          * Set the width of the dropdown. Can be any valid value for the width CSS property. *
         */
        "width"?: string;
    }
    interface ArvestDropdownOptions {
        /**
          * Unique identifier.
         */
        "identifier"?: string;
        /**
          * Emitted when a dropdown option is selected. Data payload contains selected option.
         */
        "onDropdownSelectValue"?: (event: CustomEvent<IFormDropdownOption>) => void;
        /**
          * Emitted when options are changed. Data payload contains array of new options.
         */
        "onOptionsUpdated"?: (event: CustomEvent<IFormDropdownOption[]>) => void;
        /**
          * Set true to open options.
         */
        "open"?: boolean;
        /**
          * Dropdown options as a string '[{label: string, value: string, selected?: boolean}]'
         */
        "options"?: string;
        /**
          * Enable fixed-height, scrollable dropdown
         */
        "scrollEnabled"?: boolean;
        /**
          * Set the width of the dropdown, can be any valid css value for the width property.
         */
        "width"?: string;
    }
    interface ArvestFooter {
        "withnav"?: boolean;
    }
    interface ArvestFooterContent {
    }
    interface ArvestForm {
        /**
          * Submit URL for action attribute.
         */
        "action"?: string;
        "buttonText"?: string;
        "inline"?: boolean;
        /**
          * Method for action prop ex. "get" or "post".
         */
        "method"?: string;
        /**
          * Form submit event.
         */
        "onFormSubmit"?: (event: CustomEvent<any>) => void;
    }
    interface ArvestFormAddress {
        /**
          * Google Maps API key.
         */
        "apiKey"?: string;
        /**
          * Address city
         */
        "city"?: string;
        /**
          * Should we include US territories in the states list?
         */
        "includeTerritories"?: false;
        /**
          * Event emitted when any value in the address fields change. Object in event details is formatted like:  { streetAddress: string | undefined,   unit: string | undefined,   city: string | undefined,   stateAbbr: string | undefined,   zip: string | undefined }
         */
        "onAddressChange"?: (event: CustomEvent<any>) => void;
        /**
          * Event emitted when the Google Maps js library is set up and ready to use. Event contain no data payload.
         */
        "onGoogleReady"?: (event: CustomEvent<void>) => void;
        /**
          * Address state
         */
        "stateAbbr"?: string;
        /**
          * Address street.
         */
        "street"?: string;
        /**
          * Address unit #
         */
        "unit"?: string;
        /**
          * Address zip code
         */
        "zip"?: string;
    }
    interface ArvestFormAutocomplete {
        /**
          * The aria-describedby attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute
         */
        "ariaDescribedBy"?: string;
        /**
          * The aria-label attribute is used to define a string that labels the current element. Use it in cases where a text label is not visible on the screen. If there is visible text labeling the element, use aria-labelledby instead. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute
         */
        "ariaLabel"?: string;
        /**
          * The aria-required attribute provides assistive technologies information indicating if a field is required or not. [Required]  More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-required_attribute
         */
        "ariaRequired"?: boolean;
        /**
          * Use autocomplete to improve automated assistance and the use of password managers More info here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * Is it disabled?
         */
        "disabled"?: false;
        /**
          * Give the Element a unique ID to match labels with form fields and enable functionality [Required]
         */
        "elemId"?: string;
        /**
          * Label describes the input field for the user and for screenreaders [Required]
         */
        "label"?: string;
        /**
          * Element name attribute.
         */
        "name"?: string;
        /**
          * Event emitted when a value is selected from the options dropdown. Data payload contain option object.
         */
        "onDropdownSelectValue"?: (event: CustomEvent<IFormDropdownOption>) => void;
        /**
          * Event emitted when the dropdown options are updated. Contains new options formatted as a string. Does not bubble outside of component.
         */
        "onOptionsUpdated"?: (event: CustomEvent<string>) => void;
        /**
          * Event emitted when the text changes in the text field portion of the autocomplete. Data payload contains text string.
         */
        "onTextChange"?: (event: CustomEvent<string>) => void;
        /**
          * Dropdown options '[{label: string, value: string, selected?: boolean}]'
         */
        "options"?: string;
        /**
          * Placeholders are optional and have been visually hidden from the component so any text rendered will not have an effect. This prop has been left in the event the design changes in the future.
         */
        "placeholder"?: string;
        /**
          * Is the form element required?
         */
        "required"?: boolean;
        /**
          * True for small display.
         */
        "small"?: string;
        /**
          * Initial value for field.
         */
        "value"?: string;
    }
    interface ArvestFormCheck {
        "ariaDescribedBy"?: string;
        "disabled"?: boolean;
        "inline"?: boolean;
        "label"?: string;
        "name"?: string;
        "options"?: string;
        "type"?: FormCheckboxType;
        "value"?: string;
    }
    interface ArvestFormDatePicker {
        /**
          * Is the input element disabled?
         */
        "disabled"?: boolean;
        /**
          * Component id
         */
        "identifier"?: string;
        /**
          * Define the label for the component
         */
        "label"?: string;
        /**
          * Maximum date available to pick (ex. 1900-01-01)
         */
        "max"?: string;
        /**
          * Minimum date available to pick (ex. 1900-01-01)
         */
        "min"?: string;
        /**
          * Name for the input element
         */
        "name"?: string;
        /**
          * Event emitted when the user leaves the date picker.
         */
        "onDatePickerBlur"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Event emitted when the date picker date changes.
         */
        "onDatePickerChange"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Event emitted when calendar display of date picker closes.
         */
        "onDatePickerClose"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Event emitted when the user focuses into the date picker.
         */
        "onDatePickerFocus"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Event emitted when calendar display of date picker opens.
         */
        "onDatePickerOpen"?: (event: CustomEvent<CustomEvent>) => void;
        /**
          * Define the placeholder value for the input
         */
        "placeholder"?: string;
        /**
          * Is the input element required?
         */
        "required"?: boolean;
        /**
          * Assign a role to the component
         */
        "role"?: string;
        /**
          * Element value (ex. 1900-01-01)
         */
        "value"?: string;
    }
    interface ArvestFormRange {
        "label"?: string;
    }
    interface ArvestFormTextinput {
        /**
          * The aria-describedby attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute
         */
        "ariaDescribedBy"?: string;
        /**
          * The aria-label attribute is used to define a string that labels the current element. Use it in cases where a text label is not visible on the screen. If there is visible text labeling the element, use aria-labelledby instead. More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute
         */
        "ariaLabel"?: string;
        /**
          * The aria-required attribute provides assistive technologies information indicating if a field is required or not. [Required]  More info here: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-required_attribute
         */
        "ariaRequired"?: boolean;
        /**
          * Use autocomplete to improve automated assistance and the use of password managers More info here: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * Is the input element disabled? Defaults to false.
         */
        "disabled"?: boolean;
        /**
          * Give the Element a unique ID to match labels with form fields and enable functionality [Required]
         */
        "elemId"?: string;
        /**
          * Prop for error message.
         */
        "error"?: string;
        /**
          * Regex filter for input value. Defaults to filter out special characters and underscores as per Arvest Bad Character List.
         */
        "filter"?: RegExp;
        /**
          * Label describes the input field for the user and for screenreaders [Required]
         */
        "label"?: string;
        /**
          * Prop to describe the text mask to be used.
         */
        "mask"?: string;
        /**
          * Maximum number of characters allowed.
         */
        "maxlength"?: number;
        "name"?: string;
        /**
          * textChange event tracks the change in text input. It also checks if there is an active filter on the text input and applies that filter.
         */
        "onTextChange"?: (event: CustomEvent<string>) => void;
        /**
          * Placeholders are optional and have been visually hidden from the component so any text rendered will not have an effect. This prop has been left in the event the design changes in the future.
         */
        "placeholder"?: string;
        /**
          * Is the input element required? Defaults to false.
         */
        "required"?: boolean;
        "small"?: string;
        /**
          * Type specifies what type of data should be entered into the field. Options are: email, password, text, and number. [Required]
         */
        "type"?: FormTextInputType;
        /**
          * Value of the input.
         */
        "value"?: string;
    }
    interface ArvestGrid {
    }
    interface ArvestIcon {
        "alt"?: string;
        "icon"?: string;
        "label"?: string;
    }
    interface ArvestJumbotron {
        /**
          * Body
         */
        "body"?: string;
        /**
          * Button Color
         */
        "buttoncolor"?: Color;
        /**
          * Headline
         */
        "headline"?: string;
        /**
          * Button Label
         */
        "label"?: string;
        /**
          * Subhead
         */
        "subhead"?: string;
    }
    interface ArvestList {
        /**
          * Index number for active element
         */
        "activetag"?: string;
        /**
          * Color for all elements
         */
        "color"?: Color;
        /**
          * Index number for disabled element
         */
        "disabledtag"?: string;
    }
    interface ArvestLogo {
        /**
          * Pass in a url as a string for a redirect. This is optional.
         */
        "url"?: string;
        /**
          * Pass in a variant to change the logo color. Options are white = "white", black = "black", and blue = "blue". This is not required. The default is white.
         */
        "variant"?: LogoColor;
    }
    interface ArvestMaxContainer {
    }
    interface ArvestMedia {
        "alt"?: string;
        "bodytext"?: string;
        "heading"?: string;
        "src"?: string;
    }
    interface ArvestModal {
        /**
          * Title at the top of the modal  *
         */
        "heading"?: string;
        /**
          * Event emitted when the close button on the modal is clicked.
         */
        "onClickClose"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Modal size (small, large) *
         */
        "size"?: string;
    }
    interface ArvestModalFooter {
    }
    interface ArvestNav {
        "activeindex"?: number;
        /**
          * Navigation data array  *
         */
        "navData"?: INav;
        "onShowMobileNavMain"?: (event: CustomEvent<boolean>) => void;
        "searchbarlinks"?: string;
    }
    interface ArvestNavMainMenu {
        /**
          * Active tab with underline style
         */
        "activeIndex"?: number;
        /**
          * If true, change font colors for light mode
         */
        "isLightMode"?: boolean;
        /**
          * Navigation data array  *
         */
        "navData"?: string | INav;
        "navType"?: string;
    }
    interface ArvestNavMainlink {
        /**
          * If true, change to active styles
         */
        "isactive"?: boolean;
        /**
          * If true, change font colors for light mode
         */
        "islightmode"?: boolean;
        "mobile"?: boolean;
    }
    interface ArvestNavMicrosite {
        /**
          * Active tab that has the underline
         */
        "activeindex"?: number;
        /**
          * Navigation data array  *
         */
        "navData"?: INav;
        "onShowMobileNavMicrosite"?: (event: CustomEvent<boolean>) => void;
        /**
          * Frequently asked questions for searchbar
         */
        "searchbarlinks"?: string;
    }
    interface ArvestOverlay {
        /**
          * If true, scrolling underneath the overlay is prevented.
         */
        "noscroll"?: true;
        /**
          * Event emitted when the overlay is closed.
         */
        "onOverlayClosed"?: (event: CustomEvent<void>) => void;
        /**
          * Event emitted when the overlay is opened.
         */
        "onOverlayOpened"?: (event: CustomEvent<void>) => void;
        /**
          * Set true to open the overlay and display contents. Set false to close overlay.
         */
        "visible"?: boolean;
    }
    interface ArvestPrimaryCarouselButtongroup {
        "ismobile"?: boolean;
        "onPrimaryCarouselBtnClicked"?: (event: CustomEvent<number>) => void;
        "slidePosition"?: number;
        "slides"?: string;
    }
    interface ArvestPrimaryCarouselMobilebtns {
        "color"?: Color;
        "isactive"?: boolean;
    }
    interface ArvestPrimaryHeroCarousel {
        "slides"?: string;
    }
    interface ArvestProgress {
        "haslabel"?: boolean;
        "height"?: string;
        "isanimated"?: boolean;
        "percentage"?: string;
    }
    interface ArvestResponsiveImage {
        /**
          * Alternative text for accesibility
         */
        "alt"?: string;
        "containerratio"?: string;
        "itemratio"?: string;
        /**
          * Image source link
         */
        "src"?: string;
    }
    interface ArvestSearchTextinput {
        "ariaDescribedBy"?: string;
        "ariaLabel"?: string;
        "elemId"?: string;
        "label"?: string;
        "placeholder"?: string;
        "small"?: string;
        "type"?: FormTextInputType;
    }
    interface ArvestSearchbar {
        "isMobile"?: boolean;
        /**
          * Array of links as json string.
         */
        "links"?: string;
        /**
          * Event emitted when the value entered into search changes. Contains search string.
         */
        "onSearchValueChange"?: (event: CustomEvent<string>) => void;
    }
    interface ArvestSecondaryHero {
        "header"?: string;
    }
    interface ArvestSpinner {
        "isreverse"?: boolean;
    }
    interface ArvestStepper {
        /**
          * The step state, in order, comma separated, no spaces, max 5. (active, complete, incomplete)  *
         */
        "stepStates"?: string;
        /**
          * The displayed title for each step, in order, comma separated, no spaces, max 5.  *
         */
        "stepTitles"?: string;
        /**
          * The step URL, in order, comma separated, no spaces, max 5.  *
         */
        "stepUrls"?: string;
    }
    interface ArvestToast {
        "imgalt"?: string;
        "imgsrc"?: string;
        "show"?: boolean;
    }
    interface ArvestTooltip {
        /**
          * Show or hide the tooltip arrow.  *
         */
        "arrow"?: boolean;
        /**
          * CTA title Options:  (button or text) *
         */
        "ctaTitle"?: string;
        /**
          * Type of CTA enabled? Options:  (text, button) *
         */
        "ctaType"?: TooltipCta;
        /**
          * CTA full URL  *
         */
        "ctaUrl"?: string;
        /**
          * Tooltip body copy/message (no limit)
         */
        "message"?: string;
        /**
          * Set the position of the tooltip. Options:  (top-left, top-center, top-right, bottom-left, bottom-center, bottom-right) *
         */
        "position"?: TooltipPosition;
        /**
          * Show or hide the tooltip arrow.  *
         */
        "trigger"?: TooltipTrigger;
    }
    interface ArvestTypography {
        /**
          * Font Color
         */
        "color"?: Color;
        /**
          * Typography styles
         */
        "variant"?: TypographyVariants;
    }
    interface BootstrapAlert {
        /**
          * Change the color of the component using the Color enum
         */
        "color"?: Color;
    }
    interface IntrinsicElements {
        "arvest-accordion": ArvestAccordion;
        "arvest-ad-five-col": ArvestAdFiveCol;
        "arvest-ad-four-col": ArvestAdFourCol;
        "arvest-alert": ArvestAlert;
        "arvest-badge": ArvestBadge;
        "arvest-breadcrumb": ArvestBreadcrumb;
        "arvest-button-outline": ArvestButtonOutline;
        "arvest-button-primary": ArvestButtonPrimary;
        "arvest-button-secondary": ArvestButtonSecondary;
        "arvest-button-secondary-reverse": ArvestButtonSecondaryReverse;
        "arvest-button-tertiary": ArvestButtonTertiary;
        "arvest-button-two-up": ArvestButtonTwoUp;
        "arvest-buttongroup": ArvestButtongroup;
        "arvest-card": ArvestCard;
        "arvest-card-3-col-text-cta": ArvestCard3ColTextCta;
        "arvest-card-3-col-text-image": ArvestCard3ColTextImage;
        "arvest-card-3-col-text-img-cta": ArvestCard3ColTextImgCta;
        "arvest-card-4-col-text-glyph": ArvestCard4ColTextGlyph;
        "arvest-card-4-col-text-image": ArvestCard4ColTextImage;
        "arvest-card-4-col-text-img-cta": ArvestCard4ColTextImgCta;
        "arvest-card-fullwidth": ArvestCardFullwidth;
        "arvest-card-fullwidth-product-features": ArvestCardFullwidthProductFeatures;
        "arvest-carousel": ArvestCarousel;
        "arvest-close-button": ArvestCloseButton;
        "arvest-collapse": ArvestCollapse;
        "arvest-comparison-table": ArvestComparisonTable;
        "arvest-comparison-table-cell": ArvestComparisonTableCell;
        "arvest-comparison-table-headercard": ArvestComparisonTableHeadercard;
        "arvest-comparison-table-headers": ArvestComparisonTableHeaders;
        "arvest-debit-credit-card-grid": ArvestDebitCreditCardGrid;
        "arvest-debit-credit-card-selector": ArvestDebitCreditCardSelector;
        "arvest-dropdown": ArvestDropdown;
        "arvest-dropdown-options": ArvestDropdownOptions;
        "arvest-footer": ArvestFooter;
        "arvest-footer-content": ArvestFooterContent;
        "arvest-form": ArvestForm;
        "arvest-form-address": ArvestFormAddress;
        "arvest-form-autocomplete": ArvestFormAutocomplete;
        "arvest-form-check": ArvestFormCheck;
        "arvest-form-date-picker": ArvestFormDatePicker;
        "arvest-form-range": ArvestFormRange;
        "arvest-form-textinput": ArvestFormTextinput;
        "arvest-grid": ArvestGrid;
        "arvest-icon": ArvestIcon;
        "arvest-jumbotron": ArvestJumbotron;
        "arvest-list": ArvestList;
        "arvest-logo": ArvestLogo;
        "arvest-max-container": ArvestMaxContainer;
        "arvest-media": ArvestMedia;
        "arvest-modal": ArvestModal;
        "arvest-modal-footer": ArvestModalFooter;
        "arvest-nav": ArvestNav;
        "arvest-nav-main-menu": ArvestNavMainMenu;
        "arvest-nav-mainlink": ArvestNavMainlink;
        "arvest-nav-microsite": ArvestNavMicrosite;
        "arvest-overlay": ArvestOverlay;
        "arvest-primary-carousel-buttongroup": ArvestPrimaryCarouselButtongroup;
        "arvest-primary-carousel-mobilebtns": ArvestPrimaryCarouselMobilebtns;
        "arvest-primary-hero-carousel": ArvestPrimaryHeroCarousel;
        "arvest-progress": ArvestProgress;
        "arvest-responsive-image": ArvestResponsiveImage;
        "arvest-search-textinput": ArvestSearchTextinput;
        "arvest-searchbar": ArvestSearchbar;
        "arvest-secondary-hero": ArvestSecondaryHero;
        "arvest-spinner": ArvestSpinner;
        "arvest-stepper": ArvestStepper;
        "arvest-toast": ArvestToast;
        "arvest-tooltip": ArvestTooltip;
        "arvest-typography": ArvestTypography;
        "bootstrap-alert": BootstrapAlert;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arvest-accordion": LocalJSX.ArvestAccordion & JSXBase.HTMLAttributes<HTMLArvestAccordionElement>;
            "arvest-ad-five-col": LocalJSX.ArvestAdFiveCol & JSXBase.HTMLAttributes<HTMLArvestAdFiveColElement>;
            "arvest-ad-four-col": LocalJSX.ArvestAdFourCol & JSXBase.HTMLAttributes<HTMLArvestAdFourColElement>;
            "arvest-alert": LocalJSX.ArvestAlert & JSXBase.HTMLAttributes<HTMLArvestAlertElement>;
            "arvest-badge": LocalJSX.ArvestBadge & JSXBase.HTMLAttributes<HTMLArvestBadgeElement>;
            "arvest-breadcrumb": LocalJSX.ArvestBreadcrumb & JSXBase.HTMLAttributes<HTMLArvestBreadcrumbElement>;
            "arvest-button-outline": LocalJSX.ArvestButtonOutline & JSXBase.HTMLAttributes<HTMLArvestButtonOutlineElement>;
            "arvest-button-primary": LocalJSX.ArvestButtonPrimary & JSXBase.HTMLAttributes<HTMLArvestButtonPrimaryElement>;
            "arvest-button-secondary": LocalJSX.ArvestButtonSecondary & JSXBase.HTMLAttributes<HTMLArvestButtonSecondaryElement>;
            "arvest-button-secondary-reverse": LocalJSX.ArvestButtonSecondaryReverse & JSXBase.HTMLAttributes<HTMLArvestButtonSecondaryReverseElement>;
            "arvest-button-tertiary": LocalJSX.ArvestButtonTertiary & JSXBase.HTMLAttributes<HTMLArvestButtonTertiaryElement>;
            "arvest-button-two-up": LocalJSX.ArvestButtonTwoUp & JSXBase.HTMLAttributes<HTMLArvestButtonTwoUpElement>;
            "arvest-buttongroup": LocalJSX.ArvestButtongroup & JSXBase.HTMLAttributes<HTMLArvestButtongroupElement>;
            "arvest-card": LocalJSX.ArvestCard & JSXBase.HTMLAttributes<HTMLArvestCardElement>;
            "arvest-card-3-col-text-cta": LocalJSX.ArvestCard3ColTextCta & JSXBase.HTMLAttributes<HTMLArvestCard3ColTextCtaElement>;
            "arvest-card-3-col-text-image": LocalJSX.ArvestCard3ColTextImage & JSXBase.HTMLAttributes<HTMLArvestCard3ColTextImageElement>;
            "arvest-card-3-col-text-img-cta": LocalJSX.ArvestCard3ColTextImgCta & JSXBase.HTMLAttributes<HTMLArvestCard3ColTextImgCtaElement>;
            "arvest-card-4-col-text-glyph": LocalJSX.ArvestCard4ColTextGlyph & JSXBase.HTMLAttributes<HTMLArvestCard4ColTextGlyphElement>;
            "arvest-card-4-col-text-image": LocalJSX.ArvestCard4ColTextImage & JSXBase.HTMLAttributes<HTMLArvestCard4ColTextImageElement>;
            "arvest-card-4-col-text-img-cta": LocalJSX.ArvestCard4ColTextImgCta & JSXBase.HTMLAttributes<HTMLArvestCard4ColTextImgCtaElement>;
            "arvest-card-fullwidth": LocalJSX.ArvestCardFullwidth & JSXBase.HTMLAttributes<HTMLArvestCardFullwidthElement>;
            "arvest-card-fullwidth-product-features": LocalJSX.ArvestCardFullwidthProductFeatures & JSXBase.HTMLAttributes<HTMLArvestCardFullwidthProductFeaturesElement>;
            "arvest-carousel": LocalJSX.ArvestCarousel & JSXBase.HTMLAttributes<HTMLArvestCarouselElement>;
            "arvest-close-button": LocalJSX.ArvestCloseButton & JSXBase.HTMLAttributes<HTMLArvestCloseButtonElement>;
            "arvest-collapse": LocalJSX.ArvestCollapse & JSXBase.HTMLAttributes<HTMLArvestCollapseElement>;
            "arvest-comparison-table": LocalJSX.ArvestComparisonTable & JSXBase.HTMLAttributes<HTMLArvestComparisonTableElement>;
            "arvest-comparison-table-cell": LocalJSX.ArvestComparisonTableCell & JSXBase.HTMLAttributes<HTMLArvestComparisonTableCellElement>;
            "arvest-comparison-table-headercard": LocalJSX.ArvestComparisonTableHeadercard & JSXBase.HTMLAttributes<HTMLArvestComparisonTableHeadercardElement>;
            "arvest-comparison-table-headers": LocalJSX.ArvestComparisonTableHeaders & JSXBase.HTMLAttributes<HTMLArvestComparisonTableHeadersElement>;
            "arvest-debit-credit-card-grid": LocalJSX.ArvestDebitCreditCardGrid & JSXBase.HTMLAttributes<HTMLArvestDebitCreditCardGridElement>;
            "arvest-debit-credit-card-selector": LocalJSX.ArvestDebitCreditCardSelector & JSXBase.HTMLAttributes<HTMLArvestDebitCreditCardSelectorElement>;
            "arvest-dropdown": LocalJSX.ArvestDropdown & JSXBase.HTMLAttributes<HTMLArvestDropdownElement>;
            "arvest-dropdown-options": LocalJSX.ArvestDropdownOptions & JSXBase.HTMLAttributes<HTMLArvestDropdownOptionsElement>;
            "arvest-footer": LocalJSX.ArvestFooter & JSXBase.HTMLAttributes<HTMLArvestFooterElement>;
            "arvest-footer-content": LocalJSX.ArvestFooterContent & JSXBase.HTMLAttributes<HTMLArvestFooterContentElement>;
            "arvest-form": LocalJSX.ArvestForm & JSXBase.HTMLAttributes<HTMLArvestFormElement>;
            "arvest-form-address": LocalJSX.ArvestFormAddress & JSXBase.HTMLAttributes<HTMLArvestFormAddressElement>;
            "arvest-form-autocomplete": LocalJSX.ArvestFormAutocomplete & JSXBase.HTMLAttributes<HTMLArvestFormAutocompleteElement>;
            "arvest-form-check": LocalJSX.ArvestFormCheck & JSXBase.HTMLAttributes<HTMLArvestFormCheckElement>;
            "arvest-form-date-picker": LocalJSX.ArvestFormDatePicker & JSXBase.HTMLAttributes<HTMLArvestFormDatePickerElement>;
            "arvest-form-range": LocalJSX.ArvestFormRange & JSXBase.HTMLAttributes<HTMLArvestFormRangeElement>;
            "arvest-form-textinput": LocalJSX.ArvestFormTextinput & JSXBase.HTMLAttributes<HTMLArvestFormTextinputElement>;
            "arvest-grid": LocalJSX.ArvestGrid & JSXBase.HTMLAttributes<HTMLArvestGridElement>;
            "arvest-icon": LocalJSX.ArvestIcon & JSXBase.HTMLAttributes<HTMLArvestIconElement>;
            "arvest-jumbotron": LocalJSX.ArvestJumbotron & JSXBase.HTMLAttributes<HTMLArvestJumbotronElement>;
            "arvest-list": LocalJSX.ArvestList & JSXBase.HTMLAttributes<HTMLArvestListElement>;
            "arvest-logo": LocalJSX.ArvestLogo & JSXBase.HTMLAttributes<HTMLArvestLogoElement>;
            "arvest-max-container": LocalJSX.ArvestMaxContainer & JSXBase.HTMLAttributes<HTMLArvestMaxContainerElement>;
            "arvest-media": LocalJSX.ArvestMedia & JSXBase.HTMLAttributes<HTMLArvestMediaElement>;
            "arvest-modal": LocalJSX.ArvestModal & JSXBase.HTMLAttributes<HTMLArvestModalElement>;
            "arvest-modal-footer": LocalJSX.ArvestModalFooter & JSXBase.HTMLAttributes<HTMLArvestModalFooterElement>;
            "arvest-nav": LocalJSX.ArvestNav & JSXBase.HTMLAttributes<HTMLArvestNavElement>;
            "arvest-nav-main-menu": LocalJSX.ArvestNavMainMenu & JSXBase.HTMLAttributes<HTMLArvestNavMainMenuElement>;
            "arvest-nav-mainlink": LocalJSX.ArvestNavMainlink & JSXBase.HTMLAttributes<HTMLArvestNavMainlinkElement>;
            "arvest-nav-microsite": LocalJSX.ArvestNavMicrosite & JSXBase.HTMLAttributes<HTMLArvestNavMicrositeElement>;
            "arvest-overlay": LocalJSX.ArvestOverlay & JSXBase.HTMLAttributes<HTMLArvestOverlayElement>;
            "arvest-primary-carousel-buttongroup": LocalJSX.ArvestPrimaryCarouselButtongroup & JSXBase.HTMLAttributes<HTMLArvestPrimaryCarouselButtongroupElement>;
            "arvest-primary-carousel-mobilebtns": LocalJSX.ArvestPrimaryCarouselMobilebtns & JSXBase.HTMLAttributes<HTMLArvestPrimaryCarouselMobilebtnsElement>;
            "arvest-primary-hero-carousel": LocalJSX.ArvestPrimaryHeroCarousel & JSXBase.HTMLAttributes<HTMLArvestPrimaryHeroCarouselElement>;
            "arvest-progress": LocalJSX.ArvestProgress & JSXBase.HTMLAttributes<HTMLArvestProgressElement>;
            "arvest-responsive-image": LocalJSX.ArvestResponsiveImage & JSXBase.HTMLAttributes<HTMLArvestResponsiveImageElement>;
            "arvest-search-textinput": LocalJSX.ArvestSearchTextinput & JSXBase.HTMLAttributes<HTMLArvestSearchTextinputElement>;
            "arvest-searchbar": LocalJSX.ArvestSearchbar & JSXBase.HTMLAttributes<HTMLArvestSearchbarElement>;
            "arvest-secondary-hero": LocalJSX.ArvestSecondaryHero & JSXBase.HTMLAttributes<HTMLArvestSecondaryHeroElement>;
            "arvest-spinner": LocalJSX.ArvestSpinner & JSXBase.HTMLAttributes<HTMLArvestSpinnerElement>;
            "arvest-stepper": LocalJSX.ArvestStepper & JSXBase.HTMLAttributes<HTMLArvestStepperElement>;
            "arvest-toast": LocalJSX.ArvestToast & JSXBase.HTMLAttributes<HTMLArvestToastElement>;
            "arvest-tooltip": LocalJSX.ArvestTooltip & JSXBase.HTMLAttributes<HTMLArvestTooltipElement>;
            "arvest-typography": LocalJSX.ArvestTypography & JSXBase.HTMLAttributes<HTMLArvestTypographyElement>;
            "bootstrap-alert": LocalJSX.BootstrapAlert & JSXBase.HTMLAttributes<HTMLBootstrapAlertElement>;
        }
    }
}
